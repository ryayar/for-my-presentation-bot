import random
import structlog
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineQuery, InlineQueryResultArticle, InputTextMessageContent, InlineKeyboardMarkup, \
    InlineKeyboardButton

from keyboards.open_site import get_open_site_kb, get_pharmacy_kb, get_search_buttons

# Declare router
router = Router()
router.message.filter(F.chat.type == "private")

# Declare logger
logger = structlog.get_logger()

PRODUCTS = {
    "–ö–∞–≥–æ—Ü–µ–ª —Ç–∞–±–ª–µ—Ç–∫–∏ 12–º–≥ 10—à—Ç": {
        "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–µ—Å—Ç—Ä": "https://grls.minzdrav.gov.ru/Grls_View_v2.aspx?routingGuid=28c3d2dc-d61f-4a6e-8be8-0a660b14a932",
        "–î–µ–π—Å—Ç–≤—É—é—â–µ–µ –≤–µ—â–µ—Å—Ç–≤–æ": "–ö–∞–≥–æ—Ü–µ–ª",
        "–ü–æ–ª–Ω–æ–µ —Ç–æ—Ä–≥–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ": "–ö–∞–≥–æ—Ü–µ–ª",
        "–°—Ñ–µ—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è": "–ü—Ä–æ—Ç–∏–≤–æ–≤–∏—Ä—É—Å–Ω—ã–π",
        "–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞": "–ü—Ä–æ—Ç–∏–≤–æ–≤–∏—Ä—É—Å–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ",
        "–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–∫": "–õ–µ–∫–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å—Ä–µ–¥—Å—Ç–≤–æ",
        "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å": "–ù–∏–∞—Ä–º–µ–¥–∏–∫ –§–∞—Ä–º–∞ –û–û–û",
        "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞": "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è",
        "–ö–æ–¥ –ê–¢–•": "J05AX",
        "GTIN (—à—Ç—Ä–∏—Ö-–∫–æ–¥)": "04610020540019",
        "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": "19.11.2007",
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è": "T=+(02-25)C",
        "–í–æ–∑—Ä–∞—Å—Ç": "–° 3 –ª–µ—Ç",
        "–î–∞—Ç–∞ –ø–µ—Ä–µ—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": "24.02.2021\n",
        "–ê–Ω–∞–ª–æ–≥–∏": "https://zdravcity.ru/analogs/kagocel/",
        "–°–ø–æ—Å–æ–± –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏ –¥–æ–∑–∏—Ä–æ–≤–∫–∞": (
            "*–ü—Ä–µ–ø–∞—Ä–∞—Ç –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤–Ω—É—Ç—Ä—å, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏.*\n\n"
            "üîπ *–í–∑—Ä–æ—Å–ª—ã–º* –¥–ª—è –ª–µ—á–µ–Ω–∏—è –≥—Ä–∏–ø–ø–∞ –∏ –û–†–í–ò:\n"
            "‚Äî –í –ø–µ—Ä–≤—ã–µ 2 –¥–Ω—è: –ø–æ 2 —Ç–∞–±. 3 —Ä–∞–∑–∞/—Å—É—Ç.\n"
            "‚Äî –í –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ 2 –¥–Ω—è: –ø–æ 1 —Ç–∞–±. 3 —Ä–∞–∑–∞/—Å—É—Ç.\n"
            "‚Äî –í—Å–µ–≥–æ –Ω–∞ –∫—É—Ä—Å: 18 —Ç–∞–±. (4 –¥–Ω—è).\n\n"
            "üîπ *–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ –≥—Ä–∏–ø–ø–∞ –∏ –û–†–í–ò (–≤–∑—Ä–æ—Å–ª—ã–º)*:\n"
            "‚Äî 7-–¥–Ω–µ–≤–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏: 2 –¥–Ω—è –ø–æ 2 —Ç–∞–±. 1 —Ä–∞–∑/—Å—É—Ç, –∑–∞—Ç–µ–º 5 –¥–Ω–µ–π –ø–µ—Ä–µ—Ä—ã–≤.\n"
            "‚Äî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞: –æ—Ç 1 –Ω–µ–¥–µ–ª–∏ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤.\n\n"
            "üîπ *–õ–µ—á–µ–Ω–∏–µ –≥–µ—Ä–ø–µ—Å–∞*:\n"
            "‚Äî –ü–æ 2 —Ç–∞–±. 3 —Ä–∞–∑–∞/—Å—É—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –¥–Ω–µ–π.\n"
            "‚Äî –í—Å–µ–≥–æ –Ω–∞ –∫—É—Ä—Å: 30 —Ç–∞–±. (5 –¥–Ω–µ–π).\n\n"
            "üîπ *–î–µ—Ç–∏ 3-6 –ª–µ—Ç (–≥—Ä–∏–ø–ø, –û–†–í–ò)*:\n"
            "‚Äî –í –ø–µ—Ä–≤—ã–µ 2 –¥–Ω—è: –ø–æ 1 —Ç–∞–±. 2 —Ä–∞–∑–∞/—Å—É—Ç.\n"
            "‚Äî –í –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ 2 –¥–Ω—è: –ø–æ 1 —Ç–∞–±. 1 —Ä–∞–∑/—Å—É—Ç.\n"
            "‚Äî –í—Å–µ–≥–æ –Ω–∞ –∫—É—Ä—Å: 6 —Ç–∞–±. (4 –¥–Ω—è).\n\n"
            "üîπ *–î–µ—Ç–∏ 6 –ª–µ—Ç –∏ —Å—Ç–∞—Ä—à–µ (–≥—Ä–∏–ø–ø, –û–†–í–ò)*:\n"
            "‚Äî –í –ø–µ—Ä–≤—ã–µ 2 –¥–Ω—è: –ø–æ 1 —Ç–∞–±. 3 —Ä–∞–∑–∞/—Å—É—Ç.\n"
            "‚Äî –í –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ 2 –¥–Ω—è: –ø–æ 1 —Ç–∞–±. 2 —Ä–∞–∑–∞/—Å—É—Ç.\n"
            "‚Äî –í—Å–µ–≥–æ –Ω–∞ –∫—É—Ä—Å: 10 —Ç–∞–±. (4 –¥–Ω—è).\n\n"
            "üîπ *–ü—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∞ —É –¥–µ—Ç–µ–π 3 –ª–µ—Ç –∏ —Å—Ç–∞—Ä—à–µ*:\n"
            "‚Äî 7-–¥–Ω–µ–≤–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏: 2 –¥–Ω—è –ø–æ 1 —Ç–∞–±. 1 —Ä–∞–∑/—Å—É—Ç, –∑–∞—Ç–µ–º 5 –¥–Ω–µ–π –ø–µ—Ä–µ—Ä—ã–≤.\n"
            "‚Äî –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫—É—Ä—Å–∞: –æ—Ç 1 –Ω–µ–¥–µ–ª–∏ –¥–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–µ—Å—è—Ü–µ–≤."
        )
    }
}

PHARMACIES = {
    "–º–æ—Å–∫–≤–∞": ["üíä –ê–ø—Ç–µ–∫–∞ ‚Ññ1 –Ω–∞ –¢–≤–µ—Ä—Å–∫–æ–π", "üíä –ê–ø—Ç–µ–∫–∞ ‚Ññ2 —É –ö—Ä–µ–º–ª—è"],
    "–ø–∏—Ç–µ—Ä": ["üíä –ê–ø—Ç–µ–∫–∞ –Ω–∞ –ù–µ–≤—Å–∫–æ–º", "üíä –ê–ø—Ç–µ–∫–∞ —É –≠—Ä–º–∏—Ç–∞–∂–∞"],
    "–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫": ["üíä –ê–ø—Ç–µ–∫–∞ –°–∏–±–§–∞—Ä–º", "üíä –ó–¥–æ—Ä–æ–≤—å–µ –°–∏–±–∏—Ä–∏"]
}


def get_product_keyboard(product_data) -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="üß™ –ê–Ω–∞–ª–æ–≥–∏", url=product_data["–ê–Ω–∞–ª–æ–≥–∏"]),
         InlineKeyboardButton(text="üìú –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–µ—Å—Ç—Ä", url=product_data["–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–µ—Å—Ç—Ä"])]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


async def generate_random_number(num_digits: int = 4) -> int:
    if num_digits < 1:
        raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")

    min_value = 10 ** (num_digits - 1)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1000 –¥–ª—è 4 —Ü–∏—Ñ—Ä)
    max_value = 10 ** num_digits - 1  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9999 –¥–ª—è 4 —Ü–∏—Ñ—Ä)

    return random.randint(min_value, max_value)


# Declare handlers
@router.message(Command("start"))
async def cmd_owner_hello(message: Message):
    args = message.text.split(" ", 1)
    ref_code = None

    if len(args) > 1 and args[1].startswith("ref-"):
        ref_code = args[1].replace("ref-", "")

    welcome_message = (
        "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å—Å—ã–ª–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ https://t.me/ForMyPresentationBot?start=ref-101412975\n\n"
        "/site - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–Ω–æ–ø–∫—É —Å —Å–∞–π—Ç–æ–º –≤ —Ñ—É–ª—Å–∫—Ä–∏–Ω–µ\n\n"
        "/check_code - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ\n\n"
        "/check_bitrix_code - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Bitrix\n\n"
        "/order - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –∫–Ω–æ–ø–∫—É —Å –∞–ø—Ç–µ–∫–æ–π\n\n"
        "/code_order - –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞\n\n"
        "/search - –ü–æ–∏—Å–∫ –ø–æ —Ç–æ–≤–∞—Ä—É –∏ –ø–æ–∏—Å–∫ –∞–ø—Ç–µ–∫–µ"
    )

    if ref_code:
        welcome_message = f"üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: <code>{ref_code}</code>\n\n" + welcome_message

    await message.answer(welcome_message)


@router.message(Command("site"))
async def cmd_site(message: Message):
    await message.answer("–û—Ç–∫—Ä–æ–π —Å–∞–π—Ç –ó–¥—Ä–∞–≤—Å–∏—Ç–∏ –ø—Ä—è–º–æ —Ç—É—Ç!\n"
                         "–¢—ã –Ω–µ –ø–æ–∂–∞–ª–µ–µ—à—å üëç", reply_markup=get_open_site_kb())


@router.message(Command("check_code"))
async def cmd_site(message: Message):
    code = await generate_random_number()
    await message.answer(f"<code>{code}</code>\n–í–∞—à –∫–æ–¥ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–∞–π—Ç–µ –ó–¥—Ä–∞–≤—Å–∏—Ç–∏",
                         reply_markup=get_open_site_kb())


@router.message(Command("check_bitrix_code"))
async def cmd_site(message: Message):
    await message.answer("–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –ó–¥—Ä–∞–≤—Å–∏—Ç–∏\n\n<code>9851</code>")


@router.message(Command("check_bitrix_code"))
async def cmd_site(message: Message):
    await message.answer("–ö–æ–¥ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–∞ –ó–¥—Ä–∞–≤—Å–∏—Ç–∏\n\n<code>9851</code>")


@router.message(Command("order"))
async def cmd_site(message: Message):
    code = await generate_random_number(10)
    await message.answer(f"–ó–∞–∫–∞–∑ <code>{code}</code> –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ.", reply_markup=get_pharmacy_kb())


@router.message(Command("code_order"))
async def cmd_site(message: Message):
    code = await generate_random_number()
    await message.answer(f"<code>{code}</code>\n\n–ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞")


@router.message(Command("search"))
async def cmd_site(message: Message):
    keyboard = get_search_buttons()
    await message.answer("–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –∞–ø—Ç–µ–∫–∏\n\n"
                         "–ü—Ä–∏–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ \"–ö–∞–≥–æ—Ü–µ–ª\"\n"
                         "–ü—Ä–∏–º–µ—Ä –≥–æ—Ä–æ–¥–æ–≤ –∞–ø—Ç–µ–∫ \"–º–æ—Å–∫–≤–∞\" –∏ \"–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫\"", reply_markup=keyboard)


@router.inline_query()
async def inline_query_handler(query: InlineQuery):
    text = query.query.lower().strip()

    results = []

    if text.startswith("–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞:"):
        search_term = text.replace("–ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞:", "").strip()

        matching_products = [product for product in PRODUCTS if search_term in product.lower()]

        if matching_products:
            for product in matching_products:
                product_data = PRODUCTS[product]

                description = "\n".join([
                    f"*{key}*: {value}" for key, value in product_data.items()
                    if key not in ["–°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–µ—Å—Ç—Ä", "–ê–Ω–∞–ª–æ–≥–∏"]
                ])

                keyboard = get_product_keyboard(product_data)

                results.append(
                    InlineQueryResultArticle(
                        id=f"product_{product}",
                        title=f"üîé {product}",
                        description=f"{product_data['–°—Ñ–µ—Ä–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è']} | {product_data['–§–∞—Ä–º–∞–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –≥—Ä—É–ø–ø–∞']}",
                        input_message_content=InputTextMessageContent(
                            message_text=f"üì¶ *{product}*\n\n{description}",
                            parse_mode="Markdown"
                        ),
                        reply_markup=keyboard
                    )
                )
        else:
            results.append(
                InlineQueryResultArticle(
                    id="no_product",
                    title="üö´ –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.",
                    input_message_content=InputTextMessageContent(
                        message_text="‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å."
                    )
                )
            )
    elif text.startswith("–Ω–∞–π—Ç–∏ –∞–ø—Ç–µ–∫—É –≤:"):
        city_part = text.replace("–Ω–∞–π—Ç–∏ –∞–ø—Ç–µ–∫—É –≤:", "").strip()

        matching_cities = [city for city in PHARMACIES if city_part in city]

        if matching_cities:
            for city in matching_cities:
                pharmacies = "\n".join(PHARMACIES[city])
                results.append(
                    InlineQueryResultArticle(
                        id="pharmacy_" + city,
                        title=f"üè• –ê–ø—Ç–µ–∫–∏ –≤ {city.capitalize()}",
                        description=f"–ù–∞–π–¥–µ–Ω–æ {len(PHARMACIES[city])} –∞–ø—Ç–µ–∫",
                        input_message_content=InputTextMessageContent(
                            message_text=f"üè• –ê–ø—Ç–µ–∫–∏ –≤ {city.capitalize()}:\n\n{pharmacies}",
                            parse_mode="Markdown"
                        )
                    )
                )
        else:
            results.append(
                InlineQueryResultArticle(
                    id="no_pharmacy",
                    title="üö´ –ê–ø—Ç–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                    description="–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥.",
                    input_message_content=InputTextMessageContent(
                        message_text="‚ùå –ê–ø—Ç–µ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç."
                    )
                )
            )

    await query.answer(results, cache_time=1)
